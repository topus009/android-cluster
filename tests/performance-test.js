#!/usr/bin/env node

const axios = require('axios');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testConfig = {
  cluster: {
    baseUrl: 'http://localhost:8080',
    endpoints: {
      stats: '/api/cluster/stats',
      devices: '/api/cluster/devices',
      task: '/api/cluster/task',
      bulkTasks: '/api/cluster/bulk-tasks'
    }
  },
  devices: [
    { id: 'samsung-note4', name: 'Samsung Note 4', host: '192.168.1.101', port: 3001 },
    { id: 'samsung-nexus', name: 'Samsung Google Nexus', host: '192.168.1.102', port: 3002 },
    { id: 'alcatel-7043', name: 'Alcatel One Touch 7043', host: '192.168.1.103', port: 3003 }
  ],
  testScenarios: [
    {
      name: '–§–∞–∫—Ç–æ—Ä–∏–∞–ª (–º–∞–ª—ã–µ —á–∏—Å–ª–∞)',
      operation: 'factorial',
      params: [5, 10, 15, 20],
      count: 50,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞–ª—ã—Ö —á–∏—Å–µ–ª'
    },
    {
      name: '–§–∞–∫—Ç–æ—Ä–∏–∞–ª (—Å—Ä–µ–¥–Ω–∏–µ —á–∏—Å–ª–∞)',
      operation: 'factorial',
      params: [25, 30, 35, 40],
      count: 30,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª'
    },
    {
      name: '–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (–º–∞–ª—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)',
      operation: 'primeNumbers',
      params: [100, 500, 1000, 2000],
      count: 40,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –º–∞–ª—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö'
    },
    {
      name: '–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (—Å—Ä–µ–¥–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)',
      operation: 'primeNumbers',
      params: [3000, 5000, 7000, 9000],
      count: 25,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ —Å—Ä–µ–¥–Ω–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö'
    },
    {
      name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ (–º–∞–ª—ã–µ)',
      operation: 'arraySort',
      params: [100, 500, 1000, 2000],
      count: 60,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤'
    },
    {
      name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ (—Å—Ä–µ–¥–Ω–∏–µ)',
      operation: 'arraySort',
      params: [5000, 10000, 15000, 20000],
      count: 35,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥–Ω–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤'
    },
    {
      name: '–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏)',
      operation: 'hash',
      params: ['test', 'hello', 'world', 'android'],
      count: 80,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫'
    },
    {
      name: '–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)',
      operation: 'hash',
      params: ['very-long-string-for-testing-performance', 'another-long-string-with-more-content', 'third-long-string-to-test-hash-function'],
      count: 45,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫'
    },
    {
      name: '–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ (–º–∞–ª—ã–µ)',
      operation: 'fibonacci',
      params: [10, 20, 30, 40],
      count: 70,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –º–∞–ª—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤'
    },
    {
      name: '–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ (—Å—Ä–µ–¥–Ω–∏–µ)',
      operation: 'fibonacci',
      params: [50, 60, 70, 80],
      count: 20,
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤'
    }
  ]
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class PerformanceTester {
  constructor() {
    this.results = [];
    this.currentTest = null;
    this.startTime = null;
    this.testStats = {
      totalTests: 0,
      completedTests: 0,
      failedTests: 0,
      totalTasks: 0,
      completedTasks: 0,
      failedTasks: 0,
      totalProcessingTime: 0,
      averageResponseTime: 0
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
  async checkClusterHealth() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞...');
    
    try {
      const response = await axios.get(`${testConfig.cluster.baseUrl}${testConfig.cluster.endpoints.stats}`);
      
      if (response.status === 200) {
        const stats = response.data;
        console.log(`‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω`);
        console.log(`   –£—Å—Ç—Ä–æ–π—Å—Ç–≤: ${stats.totalDevices}/${stats.onlineDevices}`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.totalTasks}`);
        console.log(`   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completedTasks}`);
        console.log(`   –û—à–∏–±–æ–∫: ${stats.failedTasks}`);
        return true;
      }
    } catch (error) {
      console.error('‚ùå –ö–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
    
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  async checkDevicesHealth() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
    
    const deviceStatus = [];
    
    for (const device of testConfig.devices) {
      try {
        const response = await axios.get(`http://${device.host}:${device.port}/health`, {
          timeout: 5000
        });
        
        if (response.status === 200) {
          const health = response.data;
          deviceStatus.push({
            device: device.name,
            status: 'online',
            uptime: health.uptime,
            memory: health.memoryUsage
          });
          console.log(`‚úÖ ${device.name}: ${health.status} (uptime: ${Math.round(health.uptime)}s)`);
        } else {
          deviceStatus.push({ device: device.name, status: 'error', error: 'HTTP Error' });
          console.log(`‚ùå ${device.name}: HTTP Error ${response.status}`);
        }
      } catch (error) {
        deviceStatus.push({ device: device.name, status: 'offline', error: error.message });
        console.log(`‚ùå ${device.name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message})`);
      }
    }
    
    return deviceStatus;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  async executeTask(operation, params) {
    try {
      const startTime = performance.now();
      
      const response = await axios.post(`${testConfig.cluster.baseUrl}${testConfig.cluster.endpoints.task}`, {
        operation,
        params
      }, {
        timeout: 30000
      });
      
      const endTime = performance.now();
      const responseTime = endTime - startTime;
      
      if (response.data.success) {
        return {
          success: true,
          taskId: response.data.taskId,
          result: response.data.result,
          responseTime,
          deviceId: response.data.deviceId,
          deviceName: response.data.deviceName,
          processingTime: response.data.processingTime
        };
      } else {
        return {
          success: false,
          error: response.data.error,
          responseTime
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error.message,
        responseTime: 0
      };
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á
  async executeBulkTasks(operation, params, count) {
    try {
      const startTime = performance.now();
      
      const response = await axios.post(`${testConfig.cluster.baseUrl}${testConfig.cluster.endpoints.bulkTasks}`, {
        operation,
        params,
        count
      }, {
        timeout: 60000
      });
      
      const endTime = performance.now();
      const responseTime = endTime - startTime;
      
      if (response.data.success) {
        return {
          success: true,
          addedTasks: response.data.addedTasks,
          taskIds: response.data.taskIds,
          responseTime
        };
      } else {
        return {
          success: false,
          error: response.data.error,
          responseTime
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error.message,
        responseTime: 0
      };
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
  async waitForTaskCompletion(expectedCount, timeout = 120000) {
    console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${expectedCount} –∑–∞–¥–∞—á...`);
    
    const startTime = Date.now();
    let completedCount = 0;
    
    while (completedCount < expectedCount && (Date.now() - startTime) < timeout) {
      try {
        const response = await axios.get(`${testConfig.cluster.baseUrl}${testConfig.cluster.endpoints.stats}`);
        const stats = response.data;
        
        completedCount = stats.completedTasks;
        
        if (completedCount >= expectedCount) {
          break;
        }
        
        // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    if (completedCount >= expectedCount) {
      console.log(`   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${completedCount} –∑–∞–¥–∞—á`);
    } else {
      console.log(`   ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${completedCount}/${expectedCount} –∑–∞–¥–∞—á`);
    }
    
    return completedCount;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
  async runTestScenario(scenario) {
    console.log(`\nüß™ –¢–µ—Å—Ç: ${scenario.name}`);
    console.log(`   üìù ${scenario.description}`);
    console.log(`   üî¢ –û–ø–µ—Ä–∞—Ü–∏—è: ${scenario.operation}`);
    console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${scenario.count}`);
    
    this.currentTest = {
      name: scenario.name,
      operation: scenario.operation,
      params: scenario.params,
      count: scenario.count,
      startTime: Date.now(),
      results: []
    };
    
    const testStartTime = performance.now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const param of scenario.params) {
      console.log(`   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä: ${param}`);
      
      const taskCount = Math.ceil(scenario.count / scenario.params.length);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
      const bulkResult = await this.executeBulkTasks(scenario.operation, param, taskCount);
      
      if (bulkResult.success) {
        console.log(`      ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${bulkResult.addedTasks} –∑–∞–¥–∞—á`);
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const completedCount = await this.waitForTaskCompletion(bulkResult.addedTasks);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try {
          const statsResponse = await axios.get(`${testConfig.cluster.baseUrl}${testConfig.cluster.endpoints.stats}`);
          const stats = statsResponse.data;
          
          this.currentTest.results.push({
            param,
            taskCount: bulkResult.addedTasks,
            completedCount,
            responseTime: bulkResult.responseTime,
            clusterStats: {
              totalTasks: stats.totalTasks,
              completedTasks: stats.completedTasks,
              failedTasks: stats.failedTasks,
              averageResponseTime: stats.averageResponseTime
            }
          });
        } catch (error) {
          console.log(`      ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
      } else {
        console.log(`      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á: ${bulkResult.error}`);
        this.currentTest.results.push({
          param,
          taskCount: 0,
          completedCount: 0,
          error: bulkResult.error
        });
      }
    }
    
    const testEndTime = performance.now();
    this.currentTest.endTime = Date.now();
    this.currentTest.duration = testEndTime - testStartTime;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.analyzeTestResults(this.currentTest);
    
    return this.currentTest;
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
  analyzeTestResults(test) {
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: ${test.name}`);
    console.log(`   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(test.duration)}–º—Å`);
    
    const successfulResults = test.results.filter(r => !r.error);
    
    if (successfulResults.length > 0) {
      const totalTasks = successfulResults.reduce((sum, r) => sum + r.taskCount, 0);
      const totalCompleted = successfulResults.reduce((sum, r) => sum + r.completedCount, 0);
      const avgResponseTime = successfulResults.reduce((sum, r) => sum + r.responseTime, 0) / successfulResults.length;
      
      console.log(`   üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
      console.log(`   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalCompleted}`);
      console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((totalCompleted / totalTasks) * 100)}%`);
      console.log(`   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgResponseTime)}–º—Å`);
      
      // –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      successfulResults.forEach(result => {
        console.log(`      ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä ${result.param}: ${result.completedCount}/${result.taskCount} –∑–∞–¥–∞—á`);
      });
    } else {
      console.log(`   ‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.results.push(test);
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Android –∫–ª–∞—Å—Ç–µ—Ä–∞\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
    if (!(await this.checkClusterHealth())) {
      console.error('‚ùå –ö–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const deviceStatus = await this.checkDevicesHealth();
    const onlineDevices = deviceStatus.filter(d => d.status === 'online').length;
    
    if (onlineDevices === 0) {
      console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
      return;
    }
    
    console.log(`\nüì± –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${onlineDevices}/${testConfig.devices.length}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    this.startTime = Date.now();
    
    for (const scenario of testConfig.testScenarios) {
      try {
        await this.runTestScenario(scenario);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 3000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ "${scenario.name}":`, error.message);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    this.generateFinalReport();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateFinalReport() {
    const endTime = Date.now();
    const totalDuration = endTime - this.startTime;
    
    console.log('\n' + '='.repeat(60));
    console.log('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ');
    console.log('='.repeat(60));
    
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${Math.round(totalDuration / 1000)}—Å`);
    console.log(`üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.length}`);
    
    const totalTasks = this.results.reduce((sum, test) => {
      return sum + test.results.reduce((testSum, result) => testSum + (result.taskCount || 0), 0);
    }, 0);
    
    const totalCompleted = this.results.reduce((sum, test) => {
      return sum + test.results.reduce((testSum, result) => testSum + (result.completedCount || 0), 0);
    }, 0);
    
    console.log(`üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalCompleted}`);
    console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((totalCompleted / totalTasks) * 100)}%`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    const operationStats = {};
    this.results.forEach(test => {
      if (!operationStats[test.operation]) {
        operationStats[test.operation] = { tests: 0, totalTasks: 0, totalCompleted: 0 };
      }
      
      operationStats[test.operation].tests++;
      test.results.forEach(result => {
        operationStats[test.operation].totalTasks += result.taskCount || 0;
        operationStats[test.operation].totalCompleted += result.completedCount || 0;
      });
    });
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º:');
    Object.entries(operationStats).forEach(([operation, stats]) => {
      const successRate = stats.totalTasks > 0 ? Math.round((stats.totalCompleted / stats.totalTasks) * 100) : 0;
      console.log(`   ‚Ä¢ ${operation}: ${stats.totalCompleted}/${stats.totalTasks} (${successRate}%)`);
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (totalCompleted / totalTasks < 0.8) {
      console.log('   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    }
    
    const avgTestTime = totalDuration / this.results.length;
    if (avgTestTime > 30000) {
      console.log('   ‚ö†Ô∏è  –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã');
    }
    
    console.log('   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log('='.repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new PerformanceTester();
  
  try {
    await tester.runAllTests();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = PerformanceTester;
