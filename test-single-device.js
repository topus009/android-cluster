#!/usr/bin/env node

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const deviceConfig = {
  id: 'samsung-note4',
  name: 'Samsung Note 4',
  port: 3001,
  host: '192.168.0.9' // IP —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–µ—Ç–∏
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
const testTasks = [
  { operation: 'factorial', params: 10, expected: 3628800 },
  { operation: 'primeNumbers', params: 100, expected: 25 },
  { operation: 'arraySort', params: 1000, expected: 1000 },
  { operation: 'hash', params: 'test-string', expected: 'number' },
  { operation: 'fibonacci', params: 20, expected: 6765 }
];

async function testDevice() {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceConfig.name}`);
  console.log(`üìç –ê–¥—Ä–µ—Å: http://${deviceConfig.host}:${deviceConfig.port}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
    const healthResponse = await axios.get(`http://${deviceConfig.host}:${deviceConfig.port}/health`);
    console.log(`‚úÖ Health check: ${healthResponse.data.status}`);
    console.log(`   Uptime: ${Math.round(healthResponse.data.uptime)}s`);
    console.log(`   Memory: ${healthResponse.data.memoryUsage.heapUsed}MB / ${healthResponse.data.memoryUsage.heapTotal}MB\n`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    console.log('2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ...');
    const deviceResponse = await axios.get(`http://${deviceConfig.host}:${deviceConfig.port}/api/device`);
    console.log(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceResponse.data.name}`);
    console.log(`   ID: ${deviceResponse.data.id}`);
    console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${deviceResponse.data.platform}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: ${deviceResponse.data.capabilities?.maxConcurrentTasks || 'N/A'}`);
    console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${deviceResponse.data.capabilities?.supportedOperations?.join(', ') || 'N/A'}\n`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π...');
    let passedTests = 0;
    let totalTests = testTasks.length;

    for (const task of testTasks) {
      try {
        console.log(`   –¢–µ—Å—Ç: ${task.operation}(${task.params})`);
        
        const startTime = Date.now();
        const response = await axios.post(`http://${deviceConfig.host}:${deviceConfig.port}/api/task`, {
          operation: task.operation,
          params: task.params,
          taskId: `test_${Date.now()}`
        });
        const endTime = Date.now();
        
        const result = response.data;
        const processingTime = endTime - startTime;
        
        if (result.success) {
          console.log(`     ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.result}`);
          console.log(`     ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime}ms`);
          console.log(`     üì± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${processingTime}ms`);
          console.log(`     üíæ –ü–∞–º—è—Ç—å: ${result.memoryUsage?.heapUsed || 'N/A'}MB`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          if (task.expected === 'number' || result.result === task.expected) {
            console.log(`     üéØ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω`);
            passedTests++;
          } else {
            console.log(`     ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å: ${task.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result.result}`);
          }
        } else {
          console.log(`     ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
        console.log('');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.log(`     ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
        console.log('');
      }
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
    const statsResponse = await axios.get(`http://${deviceConfig.host}:${deviceConfig.port}/api/stats`);
    const stats = statsResponse.data;
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.totalTasks}`);
    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completedTasks}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.failedTasks}`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(stats.averageResponseTime * 1000)}ms`);
    
    if (stats.operationStats) {
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º:');
      Object.entries(stats.operationStats).forEach(([op, opStats]) => {
        if (opStats.count > 0) {
          console.log(`   ${op}: ${opStats.count} –∑–∞–¥–∞—á, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(opStats.averageTime * 1000)}ms`);
        }
      });
    }

    // 5. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n' + '='.repeat(50));
    console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
    
    console.log('='.repeat(50));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
    console.log('   1. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ: node start-device.js samsung-note4');
    console.log('   2. –ü–æ—Ä—Ç 3001 –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏');
    console.log('   3. –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–æ–º');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDevice().catch(console.error);
