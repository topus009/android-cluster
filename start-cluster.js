#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
const clusterConfig = {
  devices: [
    { id: 'samsung-note4', name: 'Samsung Note 4', port: 3001, host: '192.168.1.101' },
    { id: 'samsung-nexus', name: 'Samsung Google Nexus', port: 3002, host: '192.168.1.102' },
    { id: 'alcatel-7043', name: 'Alcatel One Touch 7043', port: 3003, host: '192.168.1.103' }
  ],
  frontend: { port: 8080, host: '0.0.0.0' }
};

class ClusterManager {
  constructor() {
    this.processes = new Map();
    this.isRunning = false;
  }

  // –ó–∞–ø—É—Å–∫ Android worker —Å–µ—Ä–≤–µ—Ä–∞
  startAndroidWorker(device) {
    console.log(`${colors.cyan}üöÄ –ó–∞–ø—É—Å–∫ Android Worker: ${device.name}${colors.reset}`);
    
    const workerPath = path.join(__dirname, 'android-workers', 'src', 'server.js');
    
    const worker = spawn('node', [workerPath], {
      cwd: path.join(__dirname, 'android-workers'),
      env: {
        ...process.env,
        PORT: device.port,
        DEVICE_ID: device.id,
        DEVICE_NAME: device.name,
        HOST: device.host
      },
      stdio: ['pipe', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    worker.stdout.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        console.log(`${colors.green}[${device.name}]${colors.reset} ${output}`);
      }
    });

    worker.stderr.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        console.log(`${colors.red}[${device.name} ERROR]${colors.reset} ${output}`);
      }
    });

    worker.on('close', (code) => {
      if (code !== 0) {
        console.log(`${colors.red}‚ùå Android Worker ${device.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}${colors.reset}`);
      } else {
        console.log(`${colors.yellow}üîÑ Android Worker ${device.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.reset}`);
      }
    });

    this.processes.set(device.id, worker);
    return worker;
  }

  // –ó–∞–ø—É—Å–∫ frontend –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  startFrontend() {
    console.log(`${colors.cyan}üåê –ó–∞–ø—É—Å–∫ Frontend Interface${colors.reset}`);
    
    const frontendPath = path.join(__dirname, 'frontend-interface', 'src', 'server.js');
    
    const frontend = spawn('node', [frontendPath], {
      cwd: path.join(__dirname, 'frontend-interface'),
      env: {
        ...process.env,
        PORT: clusterConfig.frontend.port,
        HOST: clusterConfig.frontend.host
      },
      stdio: ['pipe', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    frontend.stdout.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        console.log(`${colors.blue}[Frontend]${colors.reset} ${output}`);
      }
    });

    frontend.stderr.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        console.log(`${colors.red}[Frontend ERROR]${colors.reset} ${output}`);
      }
    });

    frontend.on('close', (code) => {
      if (code !== 0) {
        console.log(`${colors.red}‚ùå Frontend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}${colors.reset}`);
      } else {
        console.log(`${colors.yellow}üîÑ Frontend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.reset}`);
      }
    });

    this.processes.set('frontend', frontend);
    return frontend;
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
  async start() {
    if (this.isRunning) {
      console.log(`${colors.yellow}‚ö†Ô∏è  –ö–ª–∞—Å—Ç–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω${colors.reset}`);
      return;
    }

    console.log(`${colors.bright}ü§ñ –ó–∞–ø—É—Å–∫ Android Cluster...${colors.reset}\n`);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º Android workers
      for (const device of clusterConfig.devices) {
        this.startAndroidWorker(device);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º frontend
      setTimeout(() => {
        this.startFrontend();
      }, 2000);

      this.isRunning = true;

      console.log(`\n${colors.green}‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!${colors.reset}`);
      console.log(`${colors.cyan}üì± Android Workers:${colors.reset}`);
      clusterConfig.devices.forEach(device => {
        console.log(`   ‚Ä¢ ${device.name}: http://${device.host}:${device.port}`);
      });
      console.log(`${colors.cyan}üåê Frontend Interface:${colors.reset}`);
      console.log(`   ‚Ä¢ http://localhost:${clusterConfig.frontend.port}`);
      console.log(`\n${colors.yellow}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${colors.reset}\n`);

    } catch (error) {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞:${colors.reset}`, error);
      this.stop();
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
  stop() {
    if (!this.isRunning) return;

    console.log(`\n${colors.yellow}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞...${colors.reset}`);

    for (const [id, process] of this.processes) {
      try {
        process.kill('SIGTERM');
        console.log(`${colors.yellow}üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${id}...${colors.reset}`);
      } catch (error) {
        console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${id}:${colors.reset}`, error);
      }
    }

    this.processes.clear();
    this.isRunning = false;

    console.log(`${colors.green}‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.reset}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
  async checkStatus() {
    console.log(`${colors.cyan}üìä –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞:${colors.reset}\n`);

    for (const device of clusterConfig.devices) {
      try {
        const response = await fetch(`http://${device.host}:${device.port}/health`);
        if (response.ok) {
          const data = await response.json();
          console.log(`${colors.green}‚úÖ ${device.name} (${device.host}:${device.port}) - ${data.status}${colors.reset}`);
          console.log(`   Uptime: ${Math.round(data.uptime)}s`);
        } else {
          console.log(`${colors.red}‚ùå ${device.name} (${device.host}:${device.port}) - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
        }
      } catch (error) {
        console.log(`${colors.red}‚ùå ${device.name} (${device.host}:${device.port}) - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è${colors.reset}`);
      }
    }

    try {
      const response = await fetch(`http://localhost:${clusterConfig.frontend.port}/api/cluster/stats`);
      if (response.ok) {
        const data = await response.json();
        console.log(`\n${colors.green}‚úÖ Frontend Interface (localhost:${clusterConfig.frontend.port}) - –¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
        console.log(`   –£—Å—Ç—Ä–æ–π—Å—Ç–≤: ${data.totalDevices}/${data.onlineDevices}`);
        console.log(`   –ó–∞–¥–∞—á: ${data.totalTasks} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${data.completedTasks})`);
      } else {
        console.log(`\n${colors.red}‚ùå Frontend Interface (localhost:${clusterConfig.frontend.port}) - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
      }
    } catch (error) {
      console.log(`\n${colors.red}‚ùå Frontend Interface (localhost:${clusterConfig.frontend.port}) - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è${colors.reset}`);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
const clusterManager = new ClusterManager();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  clusterManager.stop();
  process.exit(0);
});

process.on('SIGTERM', () => {
  clusterManager.stop();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

switch (command) {
  case 'start':
    clusterManager.start();
    break;
  case 'stop':
    clusterManager.stop();
    break;
  case 'status':
    clusterManager.checkStatus();
    break;
  case 'restart':
    clusterManager.stop();
    setTimeout(() => clusterManager.start(), 2000);
    break;
  default:
    console.log(`${colors.bright}ü§ñ Android Cluster Manager${colors.reset}\n`);
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node start-cluster.js start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä');
    console.log('  node start-cluster.js stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä');
    console.log('  node start-cluster.js status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    console.log('  node start-cluster.js restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä');
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node start-cluster.js start');
    console.log('  node start-cluster.js status');
    console.log('\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: node start-cluster.js start');
}
